upstream dec  {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/development/envs/dec/run/gunicorn.sock fail_timeout=0;
}

server {
    #listen       80;
    server_name  www.dielcom-ec.ru;
    return       301 http://dielcom-ec.ru$request_uri;


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/dielcom-ec.ru/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dielcom-ec.ru/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {

    #listen   80;
    server_name dielcom-ec.ru;

    ## Deny illegal Host headers
    if ($host !~* ^(dielcom-ec.ru)$ ) {
        return 444;
    }

    client_max_body_size 4G;

    access_log /development/envs/dec/logs/nginx-access.log;
    error_log /development/envs/dec/logs/nginx-error.log;

    location /static/ {
        alias   /development/projects/dec/proj/static/;
        expires 30d;
        add_header Cache-Control "public";
    }

    location /media/ {
        alias   /development/projects/dec/proj/media/;
        expires 30d;
        add_header Cache-Control "public";
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
             # clients, really.
        # proxy_buffering off;
        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://dec;
            break;
        }
    }

    gzip on;
    gzip_comp_level 5;
    gzip_vary on;
    gzip_static on;
    gzip_types text/css text/plain application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;
    gzip_min_length 1024;
    gzip_disable MSIE [4-6]\.;
    gzip_proxied any;

    # Error pages
    error_page 404 500 502 503 504 /500.html;
    location = /500.html {
        root /development/projects/dec/proj/templates/;
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/dielcom-ec.ru/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dielcom-ec.ru/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = dielcom-ec.ru) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name dielcom-ec.ru;
    listen 80;
    return 404; # managed by Certbot


}

server {
    if ($host = www.dielcom-ec.ru) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name  www.dielcom-ec.ru;
    listen 80;
    return 404; # managed by Certbot
}